import numpy as np
import math
a_1 = np.array([4, 10, 12, 23, -2, -1, 0, 0, 0, -6, 3, -7])


# 1) How many negative numbers are there?

np.sum(a_1 < 0, axis = 0)

# 2) How many positive numbers are there?

np.sum(a_1 > 0, axis = 0)

# 3) How many even positive numbers are there?

np.sum((a_1 > 0) & (a_1 % 2 == 0))

# 4) If you were to add 3 to each data point, how many positive numbers would there be?
b_1 =  a_1 + 3
np.sum(b_1 > 0, axis = 0)

# 5) If you squared each number, what would the new mean and standard deviation be?

a_std = a_1.std()
a_mean = a_1.mean()
print(a_std)
print(a_mean)

c = a_1 ** 2
c_std = c.std()
c_mean = c.mean()
print(c_std)
print(c_mean)


# 6) A common statistical operation on a dataset is centering. This means to adjust the data such that the 
# mean of the data is 0. This is done by subtracting the mean from each data point. Center the data set. 

a_1_centered = a_1 - a_1.mean
print(a_1_centered)

# 7) Calculate the z-score for each data point. Recall that the z-score is given by:Z=(x−μ)/σ
a_z_score = (a_1 - a_mean)/a_std
print(a_z_score)


# 8)

## Setup 1
a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Use python's built in functionality/operators to determine the following:
# Exercise 1 - Make a variable called sum_of_a to hold the sum of all the numbers in above list
sum_of_a = sum(a)
print(sum_of_a)
# Exercise 2 - Make a variable named min_of_a to hold the minimum of all the numbers in the above list
min_of_a = min(a)
print(min_of_a)
# Exercise 3 - Make a variable named max_of_a to hold the max number of all the numbers in the above list
max_of_a = max(a)
print(max_of_a)
# Exercise 4 - Make a variable named mean_of_a to hold the average of all the numbers in the above list
mean_of_a = sum(a)/len(a)
print(mean_of_a)
# Exercise 5 - Make a variable named product_of_a to hold the product of multiplying all the numbers in the above list together
import math
from statistics import mean
product_of_a = math.prod(a)
print(product_of_a)
# Exercise 6 - Make a variable named squares_of_a. It should hold each number in a squared like [1, 4, 9, 16, 25...]
squares_of_a = [number ** 2 for number in a]
print(squares_of_a)
# Exercise 7 - Make a variable named odds_in_a. It should hold only the odd numbers
odds_in_a = [number for number in a if number % 2 == 1]
print(odds_in_a)
# Exercise 8 - Make a variable named evens_in_a. It should hold only the evens.
evens_in_a = [number for number in a if number % 2 == 0]
print(evens_in_a)
## What about life in two dimensions? A list of lists is matrix, a table, a spreadsheet, a chessboard...
## Setup 2: Consider what it would take to find the sum, min, max, average, sum, product, and list of squares for this list of two lists.
b = [
    [3, 4, 5],
    [6, 7, 8]
]

# Exercise 1 - refactor the following to use numpy. Use sum_of_b as the variable. **Hint, you'll first need to make sure that the "b" variable is a numpy array**
sum_of_b = 0
for row in b:
    sum_of_b += sum(row)

print(sum_of_b)

import numpy as np
np_sum_of_b = np.sum(b)
print(np_sum_of_b)

# Exercise 2 - refactor the following to use numpy. 
min_of_b = min(b[0]) if min(b[0]) <= min(b[1]) else min(b[1])  

print(min_of_b)

#If axis=0 then it returns an array containing min value for each columns.
#If axis=1 then it returns an array containing min value for each row.
#If no axis set, defaults to none, thus lowest value of array.

np_min_of_b = np.amin(b) 
print(np_min_of_b) 

# Exercise 3 - refactor the following maximum calculation to find the answer with numpy.
max_of_b = max(b[0]) if max(b[0]) >= max(b[1]) else max(b[1])
print(max_of_b)

np_max_of_b = np.amax(b)
print(np_max_of_b)

# Exercise 4 - refactor the following using numpy to find the mean of b
mean_of_b = (sum(b[0]) + sum(b[1])) / (len(b[0]) + len(b[1]))
print(mean_of_b)

np_mean_of_b = np.mean(b)
print(np_mean_of_b)

# Exercise 5 - refactor the following to use numpy for calculating the product of all numbers multiplied together.
product_of_b = 1
for row in b:
    for number in row:
        product_of_b *= number
print(product_of_b)

np_product_of_b = np.prod(b)
print(np_product_of_b)

# Exercise 6 - refactor the following to use numpy to find the list of squares 
squares_of_b = []
for row in b:
    for number in row:
        squares_of_b.append(number**2)

print(squares_of_b)

np_b = np.array(b) #created an np array of b
np_squares_of_b = np_b ** 2
print(np_squares_of_b)

# Exercise 7 - refactor using numpy to determine the odds_in_b
odds_in_b = []
for row in b:
    for number in row:
        if(number % 2 != 0):
            odds_in_b.append(number)

print(odds_in_b)
step_1_b = np_b % 2 
step_2_b = step_1_b != 0
step_3_b = np_b[step_2_b]
print(step_3_b)

# Exercise 8 - refactor the following to use numpy to filter only the even numbers
evens_in_b = []
for row in b:
    for number in row:
        if(number % 2 == 0):
            evens_in_b.append(number)

step_1_b = np_b % 2 
step_2_b = step_1_b == 0
step_3_b = np_b[step_2_b]
print(step_3_b)

# Exercise 9 - print out the shape of the array b.

print(np.shape(np_b))

# Exercise 10 - transpose the array b.
print(b)
print(np.transpose(np_b))

# Exercise 11 - reshape the array b to be a single list of 6 numbers. (1 x 6)

print(np_b.reshape(6)) #array.reshape(# of elements) also could have been: np_b.reshape(1 , 6)

# Exercise 12 - reshape the array b to be a list of 6 lists, each containing only 1 number (6 x 1)

print(np_b.reshape(6 , 1))

## Setup 3
c = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

# HINT, you'll first need to make sure that the "c" variable is a numpy array prior to using numpy array methods.
# Exercise 1 - Find the min, max, sum, and product of c.

np_c = np.array(c)

# Exercise 2 - Determine the standard deviation of c.

print(np_c.std())

# Exercise 3 - Determine the variance of c.

print(np_c.var())

# Exercise 4 - Print out the shape of the array c

print(np.shape(np_c))

# Exercise 5 - Transpose c and print out transposed result.

print(np.transpose(np_c))

# Exercise 6 - Get the dot product of the array c with c. 
 
print(np.sum(np.dot(np_c, np_c))) #729, can also be written as: print(np.dot(np_c , np_c).sum())

# Exercise 7 - Write the code necessary to sum up the result of c times c transposed. Answer should be 261

#### I was not able to find the answer

np_c_transposed = np.transpose(np_c)
print(np.prod(np_c * np_c_transposed)) #1316894400 -_- 我不懂這個問題 

print(np.sum(np.dot(np_c, np_c_transposed))) #693 

print(np_c_transposed)

print(np.sum(np.prod(np_c_transposed))) #362880

print(np.sum(np_c_transposed)) #45
print(np.sum(np_c))

print(np.sum(np.dot(np_c, np_c))) #this is 729
print(np.sum(np.dot(np.transpose(np_c), np_c))) #this gets 837

# Exercise 8 - Write the code necessary to determine the product of c times c transposed. Answer should be 131681894400.

print(np.prod(np_c * np_c_transposed)) #131681899440

## Setup 4
d = [
    [90, 30, 45, 0, 120, 180],
    [45, -90, -30, 270, 90, 0],
    [60, 45, -45, 90, -45, 180]
]

# Exercise 1 - Find the sine of all the numbers in d

np_d = np.array(d)

np_d_sine = np.sin(np_d)
print(np_d_sine)

# Exercise 2 - Find the cosine of all the numbers in d

np_d_cosine = np.cos(np_d)
print(np_d_cosine)

# Exercise 3 - Find the tangent of all the numbers in d

np_d_tangent = np.tan(np_d)
print(np_d_tangent)

# Exercise 4 - Find all the negative numbers in d

step_1_d = np_d < 0
step_2_d = step_1_d == True
step_3_d = np_d[step_2_d]

print(step_3_d)

# Exercise 5 - Find all the positive numbers in d
step_1_d = np_d < 0
step_2_d = step_1_d == False
step_3_d = np_d[step_2_d]

print(step_3_d)

# Exercise 6 - Return an array of only the unique numbers in d.

print(np.unique(np_d))

# Exercise 7 - Determine how many unique numbers there are in d.

print(np.unique(np_d, return_counts = True))

# Exercise 8 - Print out the shape of d.

print(np.shape(np_d))


# Exercise 9 - Transpose and then print out the shape of d.

print(np.transpose(np_d))

# Exercise 10 - Reshape d into an array of 9 x 2

print(np_d.reshape(9 , 2))